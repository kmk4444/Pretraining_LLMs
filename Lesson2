{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":82803,"sourceType":"modelInstanceVersion","isSourceIdPinned":true,"modelInstanceId":69554,"modelId":94690}],"dockerImageVersionId":30746,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"# Lecture 2: Data Preparation\n\nIn this lesson you'll carry out some of the data cleaning steps required to prepare data for pretraining. In the video, Sung mentioned an Upstage tool called **Dataverse** which can help you with data cleaning. You can checkout the features of Dataverse at [this link](https://github.com/UpstageAI/dataverse).","metadata":{}},{"cell_type":"code","source":"import warnings\nwarnings.filterwarnings(\"ignore\")","metadata":{"execution":{"iopub.status.busy":"2024-07-26T10:04:27.174900Z","iopub.execute_input":"2024-07-26T10:04:27.175336Z","iopub.status.idle":"2024-07-26T10:04:27.181566Z","shell.execute_reply.started":"2024-07-26T10:04:27.175300Z","shell.execute_reply":"2024-07-26T10:04:27.179801Z"},"trusted":true},"execution_count":39,"outputs":[]},{"cell_type":"markdown","source":"## 1. Sourcing datasets for pretraining\n\nIn this section, you'll see two ways to source data for training:\n1. Download an existing dataset from Hugging Face\n2. Create a dataset of python scripts sourced from Github\n\nIn both cases the result will be a Hugging Face `Dataset` object, part of the `Datasets` library. You can read more about the properties of Datasets and how to work with them on the [Hugging Face website](https://huggingface.co/docs/datasets/en/index).\n\n### Download data from Hugging face\n\nThe dataset you download here is a subset of a much larger dataset called **Red Pajama**. The full, 1 trillion token dataset is available on Hugging Face at [this link](https://huggingface.co/datasets/togethercomputer/RedPajama-Data-1T).","metadata":{}},{"cell_type":"code","source":"import datasets\npretraining_dataset = datasets.load_dataset(\n    \"upstage/Pretraining_Dataset\",\n    split=\"train\"\n)","metadata":{"execution":{"iopub.status.busy":"2024-07-26T10:04:27.184377Z","iopub.execute_input":"2024-07-26T10:04:27.185086Z","iopub.status.idle":"2024-07-26T10:04:29.532003Z","shell.execute_reply.started":"2024-07-26T10:04:27.184917Z","shell.execute_reply":"2024-07-26T10:04:29.530587Z"},"trusted":true},"execution_count":40,"outputs":[]},{"cell_type":"code","source":"print(pretraining_dataset)","metadata":{"execution":{"iopub.status.busy":"2024-07-26T10:04:29.534281Z","iopub.execute_input":"2024-07-26T10:04:29.534691Z","iopub.status.idle":"2024-07-26T10:04:29.540841Z","shell.execute_reply.started":"2024-07-26T10:04:29.534659Z","shell.execute_reply":"2024-07-26T10:04:29.539490Z"},"trusted":true},"execution_count":41,"outputs":[{"name":"stdout","text":"Dataset({\n    features: ['text', 'meta'],\n    num_rows: 60000\n})\n","output_type":"stream"}]},{"cell_type":"markdown","source":"Only work with the `text` column:","metadata":{}},{"cell_type":"code","source":"pretraining_dataset = pretraining_dataset.select_columns(\n    [\"text\"]\n)","metadata":{"execution":{"iopub.status.busy":"2024-07-26T10:04:29.542173Z","iopub.execute_input":"2024-07-26T10:04:29.542537Z","iopub.status.idle":"2024-07-26T10:04:29.562162Z","shell.execute_reply.started":"2024-07-26T10:04:29.542486Z","shell.execute_reply":"2024-07-26T10:04:29.560986Z"},"trusted":true},"execution_count":42,"outputs":[]},{"cell_type":"markdown","source":"Print a sample:","metadata":{}},{"cell_type":"code","source":"print(pretraining_dataset[0][\"text\"][:500])","metadata":{"execution":{"iopub.status.busy":"2024-07-26T10:04:29.564806Z","iopub.execute_input":"2024-07-26T10:04:29.565519Z","iopub.status.idle":"2024-07-26T10:04:29.578268Z","shell.execute_reply.started":"2024-07-26T10:04:29.565468Z","shell.execute_reply":"2024-07-26T10:04:29.576791Z"},"trusted":true},"execution_count":43,"outputs":[{"name":"stdout","text":"In 1793 Zaman Shah, a grandson of Ahmad Shah Durrani, won a brief war of succession to become ruler of Afghanistan. The support of Painda Khan, chief of the Baraksai branch of the Durrani tribe, was decisive in his victory. In the next fifty year., the brothers of Zaman shah and the sons of Painda Khan were to dominate the affairs of Afghanistan. The Durrani tribe was very large with several branches and numerous clans. 1 Abmad Shah and his successors belonged to the Sadozai clan, but other clan\n","output_type":"stream"}]},{"cell_type":"markdown","source":"### Compare pretraining and fine-tuning datasets\nIn the next cell, you'll download a fine-tuning dataset to contrast with the pretraining dataset you loaded above. You can read more about the Alpaca model and instruction tuning dataset [here](https://crfm.stanford.edu/2023/03/13/alpaca.html). ","metadata":{}},{"cell_type":"code","source":"instruction_dataset = datasets.load_dataset(\n    \"c-s-ale/alpaca-gpt4-data\",\n    split=\"train\"\n)\nprint(instruction_dataset)","metadata":{"execution":{"iopub.status.busy":"2024-07-26T10:04:29.579823Z","iopub.execute_input":"2024-07-26T10:04:29.580251Z","iopub.status.idle":"2024-07-26T10:04:33.108059Z","shell.execute_reply.started":"2024-07-26T10:04:29.580218Z","shell.execute_reply":"2024-07-26T10:04:33.106598Z"},"trusted":true},"execution_count":44,"outputs":[{"name":"stdout","text":"Dataset({\n    features: ['instruction', 'input', 'output'],\n    num_rows: 52002\n})\n","output_type":"stream"}]},{"cell_type":"code","source":"i=0\nprint(\"Instruction: \" + instruction_dataset[i][\"instruction\"] \n      + \"\\nInput: \" + instruction_dataset[i][\"input\"] \n      + \"\\nOutput: \" + instruction_dataset[i][\"output\"])","metadata":{"execution":{"iopub.status.busy":"2024-07-26T10:04:33.109689Z","iopub.execute_input":"2024-07-26T10:04:33.110184Z","iopub.status.idle":"2024-07-26T10:04:33.118137Z","shell.execute_reply.started":"2024-07-26T10:04:33.110144Z","shell.execute_reply":"2024-07-26T10:04:33.116921Z"},"trusted":true},"execution_count":45,"outputs":[{"name":"stdout","text":"Instruction: Give three tips for staying healthy.\nInput: \nOutput: 1. Eat a balanced and nutritious diet: Make sure your meals are inclusive of a variety of fruits and vegetables, lean protein, whole grains, and healthy fats. This helps to provide your body with the essential nutrients to function at its best and can help prevent chronic diseases.\n\n2. Engage in regular physical activity: Exercise is crucial for maintaining strong bones, muscles, and cardiovascular health. Aim for at least 150 minutes of moderate aerobic exercise or 75 minutes of vigorous exercise each week.\n\n3. Get enough sleep: Getting enough quality sleep is crucial for physical and mental well-being. It helps to regulate mood, improve cognitive function, and supports healthy growth and immune function. Aim for 7-9 hours of sleep each night.\n","output_type":"stream"}]},{"cell_type":"markdown","source":"Notice how in contrast to the pretraining data, which is just raw text, fine-tuning datasets are structured into question-answer pairs or instruction-response sets that can include additional input context if required. \n\nMoving forward, you'll only work with the unstructured pretraining dataset.","metadata":{}},{"cell_type":"markdown","source":"### Scrape python code from Github\nHere, you'll download a selection of python scripts from Github and then prepare them as a Hugging Face `Dataset` object to use in training. \n\nThe same pattern here will work for preparing any text scraped from the web.","metadata":{}},{"cell_type":"code","source":"# Import some required package\nimport os\nimport requests\n\n#Path to directory to store python scripts\ncode_dir = \"/kaggle/working/\"","metadata":{"execution":{"iopub.status.busy":"2024-07-26T10:04:33.120369Z","iopub.execute_input":"2024-07-26T10:04:33.121181Z","iopub.status.idle":"2024-07-26T10:04:33.137728Z","shell.execute_reply.started":"2024-07-26T10:04:33.121124Z","shell.execute_reply":"2024-07-26T10:04:33.136420Z"},"trusted":true},"execution_count":46,"outputs":[]},{"cell_type":"code","source":"urls = [\n    \"https://raw.githubusercontent.com/TheAlgorithms/Python/master/searches/double_linear_search_recursion.py\",\n    \"https://raw.githubusercontent.com/KosingZhu/tensorflow/master/tensorflow/python/tools/module_util.py\",\n    \"https://raw.githubusercontent.com/EricRemmerswaal/tensorflow/master/tensorflow/python/distribute/distribute_coordinator_context.py\",\n    \"https://raw.githubusercontent.com/computationalartist/tensorflow/master/tensorflow/python/ops/numpy_ops/integration_test/benchmarks/numpy_mlp.py\",\n    \"https://raw.githubusercontent.com/Van-an/tensorflow/master/tensorflow/python/distribute/coordinator/values.py\",\n    \"https://raw.githubusercontent.com/nkgwer/tensorflow/master/tensorflow/lite/tools/visualize.py\",\n    \"https://raw.githubusercontent.com/gitblazer/youtube-dl/master/youtube_dl/version.py\",\n    \"https://raw.githubusercontent.com/Joshua-Barawa/My-Photos/master/venv/lib/python3.8/site-packages/django/contrib/messages/__init__.py\",\n    \"https://raw.githubusercontent.com/PaliC/pytorch/master/test/fx/test_subgraph_rewriter.py\"\n]","metadata":{"execution":{"iopub.status.busy":"2024-07-26T10:04:33.139198Z","iopub.execute_input":"2024-07-26T10:04:33.139594Z","iopub.status.idle":"2024-07-26T10:04:33.161289Z","shell.execute_reply.started":"2024-07-26T10:04:33.139552Z","shell.execute_reply":"2024-07-26T10:04:33.159863Z"},"trusted":true},"execution_count":47,"outputs":[]},{"cell_type":"markdown","source":"Retrieve the python scripts:","metadata":{}},{"cell_type":"code","source":"for url in urls:\n    print(f\"Working on url: {url}\")\n    response = requests.get(url)\n    file_name = os.path.basename(url)\n    file_path = os.path.join(code_dir, file_name)\n    \n    with open(file_path, \"wb\") as file:\n        file.write(response.content)","metadata":{"execution":{"iopub.status.busy":"2024-07-26T10:04:33.162970Z","iopub.execute_input":"2024-07-26T10:04:33.163341Z","iopub.status.idle":"2024-07-26T10:04:34.558696Z","shell.execute_reply.started":"2024-07-26T10:04:33.163310Z","shell.execute_reply":"2024-07-26T10:04:34.557564Z"},"trusted":true},"execution_count":48,"outputs":[{"name":"stdout","text":"Working on url: https://raw.githubusercontent.com/TheAlgorithms/Python/master/searches/double_linear_search_recursion.py\nWorking on url: https://raw.githubusercontent.com/KosingZhu/tensorflow/master/tensorflow/python/tools/module_util.py\nWorking on url: https://raw.githubusercontent.com/EricRemmerswaal/tensorflow/master/tensorflow/python/distribute/distribute_coordinator_context.py\nWorking on url: https://raw.githubusercontent.com/computationalartist/tensorflow/master/tensorflow/python/ops/numpy_ops/integration_test/benchmarks/numpy_mlp.py\nWorking on url: https://raw.githubusercontent.com/Van-an/tensorflow/master/tensorflow/python/distribute/coordinator/values.py\nWorking on url: https://raw.githubusercontent.com/nkgwer/tensorflow/master/tensorflow/lite/tools/visualize.py\nWorking on url: https://raw.githubusercontent.com/gitblazer/youtube-dl/master/youtube_dl/version.py\nWorking on url: https://raw.githubusercontent.com/Joshua-Barawa/My-Photos/master/venv/lib/python3.8/site-packages/django/contrib/messages/__init__.py\nWorking on url: https://raw.githubusercontent.com/PaliC/pytorch/master/test/fx/test_subgraph_rewriter.py\n","output_type":"stream"}]},{"cell_type":"code","source":"files = os.listdir(code_dir)\nfor file in files:\n    print(file)","metadata":{"execution":{"iopub.status.busy":"2024-07-26T10:04:34.561428Z","iopub.execute_input":"2024-07-26T10:04:34.561782Z","iopub.status.idle":"2024-07-26T10:04:34.568565Z","shell.execute_reply.started":"2024-07-26T10:04:34.561753Z","shell.execute_reply":"2024-07-26T10:04:34.567227Z"},"trusted":true},"execution_count":49,"outputs":[{"name":"stdout","text":"double_linear_search_recursion.py\nvisualize.py\ndistribute_coordinator_context.py\n.virtual_documents\n__init__.py\ntest_subgraph_rewriter.py\nvalues.py\nnumpy_mlp.py\nversion.py\nmodule_util.py\n","output_type":"stream"}]},{"cell_type":"markdown","source":"Concatenate scripts into a list:","metadata":{}},{"cell_type":"code","source":"import os\n\ncode_dataset = []\nfor file in os.listdir(code_dir):\n    file_path = os.path.join(code_dir, file)\n    if os.path.isfile(file_path):  # Sadece dosyalar üzerinde işlem yap\n        with open(file_path, 'r') as f:\n            code_dataset.append({'text': f.read()})\n","metadata":{"execution":{"iopub.status.busy":"2024-07-26T10:04:49.368907Z","iopub.execute_input":"2024-07-26T10:04:49.369348Z","iopub.status.idle":"2024-07-26T10:04:49.378166Z","shell.execute_reply.started":"2024-07-26T10:04:49.369313Z","shell.execute_reply":"2024-07-26T10:04:49.376717Z"},"trusted":true},"execution_count":52,"outputs":[]},{"cell_type":"markdown","source":"Convert list to Hugging Face `Dataset` object:","metadata":{}},{"cell_type":"code","source":"code_dataset = datasets.Dataset.from_list(code_dataset)\nprint(code_dataset)","metadata":{"execution":{"iopub.status.busy":"2024-07-26T10:05:47.256114Z","iopub.execute_input":"2024-07-26T10:05:47.256558Z","iopub.status.idle":"2024-07-26T10:05:47.271369Z","shell.execute_reply.started":"2024-07-26T10:05:47.256525Z","shell.execute_reply":"2024-07-26T10:05:47.270181Z"},"trusted":true},"execution_count":53,"outputs":[{"name":"stdout","text":"Dataset({\n    features: ['text'],\n    num_rows: 9\n})\n","output_type":"stream"}]},{"cell_type":"markdown","source":"Combine the python code dataset with the pretraining dataset you downloaded above:","metadata":{}},{"cell_type":"code","source":"dataset = datasets.concatenate_datasets(\n    [pretraining_dataset, code_dataset]\n)\n\nprint(dataset)","metadata":{"execution":{"iopub.status.busy":"2024-07-26T10:07:41.335174Z","iopub.execute_input":"2024-07-26T10:07:41.335634Z","iopub.status.idle":"2024-07-26T10:07:41.348465Z","shell.execute_reply.started":"2024-07-26T10:07:41.335596Z","shell.execute_reply":"2024-07-26T10:07:41.347187Z"},"trusted":true},"execution_count":54,"outputs":[{"name":"stdout","text":"Dataset({\n    features: ['text'],\n    num_rows: 60009\n})\n","output_type":"stream"}]},{"cell_type":"markdown","source":"## 2. Data cleaning\n\nIn the cells below, you'll carry out the following cleaning steps:\n1. Filter out samples that are too short\n2. Remove repetitions within a single text example\n3. Remove duplicated documents\n4. Quality filter to remove non-English texts ","metadata":{}},{"cell_type":"code","source":"dataset.num_rows","metadata":{"execution":{"iopub.status.busy":"2024-07-26T10:08:26.470198Z","iopub.execute_input":"2024-07-26T10:08:26.471406Z","iopub.status.idle":"2024-07-26T10:08:26.479688Z","shell.execute_reply.started":"2024-07-26T10:08:26.471357Z","shell.execute_reply":"2024-07-26T10:08:26.477745Z"},"trusted":true},"execution_count":55,"outputs":[{"execution_count":55,"output_type":"execute_result","data":{"text/plain":"60009"},"metadata":{}}]},{"cell_type":"markdown","source":"### Remove examples that are too short","metadata":{}},{"cell_type":"code","source":"import heapq\n\ndef paragraph_length_filter(x):\n    \"\"\"Returns False if a page has too few lines or lines are too short.\"\"\"\n    lines = x['text'].split('\\n')\n    if (\n        len(lines) <3\n        or min(heapq.nlargest(3, [len(line) for line in lines])) < 3\n    ):\n        return False\n    return True","metadata":{"execution":{"iopub.status.busy":"2024-07-26T10:13:41.751168Z","iopub.execute_input":"2024-07-26T10:13:41.751604Z","iopub.status.idle":"2024-07-26T10:13:41.757648Z","shell.execute_reply.started":"2024-07-26T10:13:41.751562Z","shell.execute_reply":"2024-07-26T10:13:41.756560Z"},"trusted":true},"execution_count":57,"outputs":[]},{"cell_type":"code","source":"dataset = dataset.filter(\n    paragraph_length_filter,\n    load_from_cache_file=False\n)","metadata":{"execution":{"iopub.status.busy":"2024-07-26T10:15:26.540096Z","iopub.execute_input":"2024-07-26T10:15:26.540555Z","iopub.status.idle":"2024-07-26T10:15:28.413486Z","shell.execute_reply.started":"2024-07-26T10:15:26.540520Z","shell.execute_reply":"2024-07-26T10:15:28.412344Z"},"trusted":true},"execution_count":58,"outputs":[{"output_type":"display_data","data":{"text/plain":"Filter:   0%|          | 0/60009 [00:00<?, ? examples/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"1450a99b417f4bbf836b9c716bb64d3c"}},"metadata":{}}]},{"cell_type":"code","source":"dataset.num_rows","metadata":{"execution":{"iopub.status.busy":"2024-07-26T10:15:38.743353Z","iopub.execute_input":"2024-07-26T10:15:38.743771Z","iopub.status.idle":"2024-07-26T10:15:38.751130Z","shell.execute_reply.started":"2024-07-26T10:15:38.743740Z","shell.execute_reply":"2024-07-26T10:15:38.750055Z"},"trusted":true},"execution_count":59,"outputs":[{"execution_count":59,"output_type":"execute_result","data":{"text/plain":"52357"},"metadata":{}}]},{"cell_type":"markdown","source":"### Remove repeated text within training examples\n\nHere you'll remove text repetitions within each example. ","metadata":{}},{"cell_type":"code","source":"def find_duplicates(paragraphs):\n    \"\"\"\n    Use this function to find the number of repetitions \n    in the paragraphs.\n    \"\"\"\n    \n    unique_x = set()\n    duplicate_chars = 0\n    duplicate_elements = 0\n    for element in paragraphs:\n        if element in unique_x:\n            duplicate_chars += len(element)\n            duplicate_elements +=1\n        else:\n            unique_x.add(element)\n    return duplicate_elements, duplicate_chars","metadata":{"execution":{"iopub.status.busy":"2024-07-26T10:23:11.431171Z","iopub.execute_input":"2024-07-26T10:23:11.431706Z","iopub.status.idle":"2024-07-26T10:23:11.438159Z","shell.execute_reply.started":"2024-07-26T10:23:11.431669Z","shell.execute_reply":"2024-07-26T10:23:11.437092Z"},"trusted":true},"execution_count":60,"outputs":[]},{"cell_type":"code","source":"import re\n\ndef paragraph_repetition_filter(x):\n    \"\"\"\n    Returns False iff a page has too many repetitions.\n    \"\"\"\n    text = x['text']\n    paragraphs = re.compile(r\"\\n{2,}\").split(text.strip())                # Split by paragraphs (2 or more newlines)\n    paragraphs_duplicates, char_duplicates = find_duplicates(paragraphs)  # Find number of duplicates in paragraphs\n    if paragraphs_duplicates / len(paragraphs) > 0.3:\n        return False\n    if char_duplicates / len(text) > 0.2:\n        return False\n    return True","metadata":{"execution":{"iopub.status.busy":"2024-07-26T10:28:06.586377Z","iopub.execute_input":"2024-07-26T10:28:06.586786Z","iopub.status.idle":"2024-07-26T10:28:06.593738Z","shell.execute_reply.started":"2024-07-26T10:28:06.586757Z","shell.execute_reply":"2024-07-26T10:28:06.592433Z"},"trusted":true},"execution_count":61,"outputs":[]},{"cell_type":"code","source":"dataset = dataset.filter(\n    paragraph_repetition_filter,\n    load_from_cache_file=False\n)","metadata":{"execution":{"iopub.status.busy":"2024-07-26T10:28:41.265408Z","iopub.execute_input":"2024-07-26T10:28:41.266121Z","iopub.status.idle":"2024-07-26T10:28:46.777315Z","shell.execute_reply.started":"2024-07-26T10:28:41.266088Z","shell.execute_reply":"2024-07-26T10:28:46.775946Z"},"trusted":true},"execution_count":63,"outputs":[{"output_type":"display_data","data":{"text/plain":"Filter:   0%|          | 0/52357 [00:00<?, ? examples/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"1fa42025569b4bea94e0a1d4539dcd7f"}},"metadata":{}}]},{"cell_type":"code","source":"dataset.num_rows","metadata":{"execution":{"iopub.status.busy":"2024-07-26T10:28:54.768876Z","iopub.execute_input":"2024-07-26T10:28:54.769323Z","iopub.status.idle":"2024-07-26T10:28:54.776564Z","shell.execute_reply.started":"2024-07-26T10:28:54.769291Z","shell.execute_reply":"2024-07-26T10:28:54.775362Z"},"trusted":true},"execution_count":64,"outputs":[{"execution_count":64,"output_type":"execute_result","data":{"text/plain":"52327"},"metadata":{}}]},{"cell_type":"markdown","source":"### Deduplication\n\nIn this section, you'll remove duplicate examples from the entire dataset (in contrast to the previous step where you were just looking for repeated text in each example.)","metadata":{}},{"cell_type":"code","source":"def deduplication(ds):\n    def dedup_func(x):\n        \"\"\"Use this function to remove duplicate entries\"\"\"\n        if x['text'] in unique_text:\n            return False\n        else:\n            unique_text.add(x['text'])\n            return True\n\n    unique_text = set()\n\n    ds = ds.filter(dedup_func, load_from_cache_file=False, num_proc=1)\n    return ds\n\ndataset = deduplication(dataset)","metadata":{"execution":{"iopub.status.busy":"2024-07-26T10:51:52.208254Z","iopub.execute_input":"2024-07-26T10:51:52.208704Z","iopub.status.idle":"2024-07-26T10:51:53.631051Z","shell.execute_reply.started":"2024-07-26T10:51:52.208671Z","shell.execute_reply":"2024-07-26T10:51:53.629617Z"},"trusted":true},"execution_count":66,"outputs":[{"output_type":"display_data","data":{"text/plain":"Filter:   0%|          | 0/52327 [00:00<?, ? examples/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"b1e57c82f2ef491ca8070663c705531a"}},"metadata":{}}]},{"cell_type":"code","source":"dataset.num_rows","metadata":{"execution":{"iopub.status.busy":"2024-07-26T10:51:57.830101Z","iopub.execute_input":"2024-07-26T10:51:57.830881Z","iopub.status.idle":"2024-07-26T10:51:57.836659Z","shell.execute_reply.started":"2024-07-26T10:51:57.830848Z","shell.execute_reply":"2024-07-26T10:51:57.835598Z"},"trusted":true},"execution_count":67,"outputs":[{"execution_count":67,"output_type":"execute_result","data":{"text/plain":"43598"},"metadata":{}}]},{"cell_type":"markdown","source":"### Quality filter - Language\n\nHere you'll remove any text examples that are in a language other than English. The code here uses a language detection model called fastText. You can read about fastText [here](https://fasttext.cc/).","metadata":{}},{"cell_type":"code","source":"!pip install fasttext","metadata":{"execution":{"iopub.status.busy":"2024-07-26T10:53:13.146671Z","iopub.execute_input":"2024-07-26T10:53:13.147064Z","iopub.status.idle":"2024-07-26T10:53:27.843527Z","shell.execute_reply.started":"2024-07-26T10:53:13.147035Z","shell.execute_reply":"2024-07-26T10:53:27.842155Z"},"trusted":true},"execution_count":68,"outputs":[{"name":"stdout","text":"Requirement already satisfied: fasttext in /opt/conda/lib/python3.10/site-packages (0.9.3)\nRequirement already satisfied: pybind11>=2.2 in /opt/conda/lib/python3.10/site-packages (from fasttext) (2.13.1)\nRequirement already satisfied: setuptools>=0.7.0 in /opt/conda/lib/python3.10/site-packages (from fasttext) (69.0.3)\nRequirement already satisfied: numpy in /opt/conda/lib/python3.10/site-packages (from fasttext) (1.26.4)\n","output_type":"stream"}]},{"cell_type":"code","source":"import urllib\nfrom fasttext.FastText import _FastText\n\ndef english_language_filter(ds):\n    # load language detection model\n    model = _FastText('/kaggle/input/l2_language_model.bin/other/default/1/L2_language_model.bin')\n    \n    def is_english(x):\n        # Predict language of the text and probability\n        language, score = model.predict(x['text'].replace(\"\\n\", \"\"))\n\n        language = language[0].split(\"__\")[2]\n        return score > 0.4 and language == \"en\" # change code here if building a model in another language\n\n    ds = ds.filter(is_english, load_from_cache_file=False, num_proc=1)\n    return ds\n\ndataset = english_language_filter(dataset)","metadata":{"execution":{"iopub.status.busy":"2024-07-26T11:03:13.713131Z","iopub.execute_input":"2024-07-26T11:03:13.713568Z","iopub.status.idle":"2024-07-26T11:03:37.639086Z","shell.execute_reply.started":"2024-07-26T11:03:13.713533Z","shell.execute_reply":"2024-07-26T11:03:37.637850Z"},"trusted":true},"execution_count":71,"outputs":[{"name":"stderr","text":"Parameter 'function'=<function english_language_filter.<locals>.is_english at 0x7a41c08ad900> of the transform datasets.arrow_dataset.Dataset.filter@2.0.1 couldn't be hashed properly, a random hash was used instead. Make sure your transforms and parameters are serializable with pickle or dill for the dataset fingerprinting and caching to work. If you reuse this transform, the caching mechanism will consider it to be different from the previous calls and recompute everything. This warning is only showed once. Subsequent hashing failures won't be showed.\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"Filter:   0%|          | 0/43598 [00:00<?, ? examples/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"9996692ade814c7db0c904f501327a15"}},"metadata":{}}]},{"cell_type":"code","source":"dataset.num_rows","metadata":{"execution":{"iopub.status.busy":"2024-07-26T11:04:02.333554Z","iopub.execute_input":"2024-07-26T11:04:02.334017Z","iopub.status.idle":"2024-07-26T11:04:02.340752Z","shell.execute_reply.started":"2024-07-26T11:04:02.333985Z","shell.execute_reply":"2024-07-26T11:04:02.339692Z"},"trusted":true},"execution_count":72,"outputs":[{"execution_count":72,"output_type":"execute_result","data":{"text/plain":"40474"},"metadata":{}}]},{"cell_type":"markdown","source":"## 3. Save the dataset to disk\n\nRead more about the parquet data format [here](https://parquet.apache.org/).","metadata":{}},{"cell_type":"code","source":"file_path = \"/kaggle/working/preprocessed_dataset.parquet\"\ndataset.to_parquet(file_path)","metadata":{"execution":{"iopub.status.busy":"2024-07-26T11:05:16.115539Z","iopub.execute_input":"2024-07-26T11:05:16.116296Z","iopub.status.idle":"2024-07-26T11:05:17.803088Z","shell.execute_reply.started":"2024-07-26T11:05:16.116256Z","shell.execute_reply":"2024-07-26T11:05:17.801934Z"},"trusted":true},"execution_count":73,"outputs":[{"output_type":"display_data","data":{"text/plain":"Creating parquet from Arrow format:   0%|          | 0/41 [00:00<?, ?ba/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"c6fb124eda074dae8442e194bdbb9db9"}},"metadata":{}},{"execution_count":73,"output_type":"execute_result","data":{"text/plain":"197101804"},"metadata":{}}]},{"cell_type":"markdown","source":"# Lesson 3: Data Packaging\n## 1. Tokenizing and creating input_ids\n\nStart by loading the dataset from the previous lesson:","metadata":{}},{"cell_type":"code","source":"import datasets\n\ndataset = datasets.load_dataset(\n    \"parquet\", \n    data_files=\"/kaggle/working/preprocessed_dataset.parquet\", \n    split=\"train\"\n)\nprint(dataset)","metadata":{"execution":{"iopub.status.busy":"2024-07-26T11:25:25.405300Z","iopub.execute_input":"2024-07-26T11:25:25.406927Z","iopub.status.idle":"2024-07-26T11:25:27.039596Z","shell.execute_reply.started":"2024-07-26T11:25:25.406883Z","shell.execute_reply":"2024-07-26T11:25:27.038230Z"},"trusted":true},"execution_count":74,"outputs":[{"output_type":"display_data","data":{"text/plain":"Generating train split: 0 examples [00:00, ? examples/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"ac03c653881f4ba29d83eef92beabd99"}},"metadata":{}},{"name":"stdout","text":"Dataset({\n    features: ['text'],\n    num_rows: 40474\n})\n","output_type":"stream"}]},{"cell_type":"markdown","source":"Use the `shard` method of the Hugging Face `Dataset` object to split the dataset into 10 smaller pieces, or *shards* (think shards of broken glass). You can read more about sharding at [this link](https://huggingface.co/docs/datasets/en/process#shard).","metadata":{}},{"cell_type":"code","source":"dataset = dataset.shard(num_shards=10, index=0)\nprint(dataset)","metadata":{"execution":{"iopub.status.busy":"2024-07-26T11:26:52.073103Z","iopub.execute_input":"2024-07-26T11:26:52.074462Z","iopub.status.idle":"2024-07-26T11:26:52.087224Z","shell.execute_reply.started":"2024-07-26T11:26:52.074412Z","shell.execute_reply":"2024-07-26T11:26:52.086076Z"},"trusted":true},"execution_count":75,"outputs":[{"name":"stdout","text":"Dataset({\n    features: ['text'],\n    num_rows: 4048\n})\n","output_type":"stream"}]},{"cell_type":"markdown","source":"Load the tokenizer and try it out:","metadata":{}},{"cell_type":"code","source":"from transformers import AutoTokenizer\nmodel_path_or_name = \"upstage/SOLAR-10.7B-v1.0\"\ntokenizer = AutoTokenizer.from_pretrained(\n    model_path_or_name,\n    use_fast=False\n)","metadata":{"execution":{"iopub.status.busy":"2024-07-26T11:28:28.652468Z","iopub.execute_input":"2024-07-26T11:28:28.653030Z","iopub.status.idle":"2024-07-26T11:28:37.099861Z","shell.execute_reply.started":"2024-07-26T11:28:28.652978Z","shell.execute_reply":"2024-07-26T11:28:37.098708Z"},"trusted":true},"execution_count":76,"outputs":[{"output_type":"display_data","data":{"text/plain":"tokenizer_config.json:   0%|          | 0.00/966 [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"e7283698938c4b0992ebac7becd3cedd"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"tokenizer.model:   0%|          | 0.00/493k [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"a12fa02d08c34999b02e055775663a96"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"special_tokens_map.json:   0%|          | 0.00/72.0 [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"07c0e9f5b48d46a4b56db24fcc8eb979"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"tokenizer.json:   0%|          | 0.00/1.80M [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"6b2b3300b49a409385eeaaa8b493987d"}},"metadata":{}}]},{"cell_type":"code","source":"tokenizer.tokenize(\"I'm a short sentence\")","metadata":{"execution":{"iopub.status.busy":"2024-07-26T11:28:46.953782Z","iopub.execute_input":"2024-07-26T11:28:46.954199Z","iopub.status.idle":"2024-07-26T11:28:46.961962Z","shell.execute_reply.started":"2024-07-26T11:28:46.954167Z","shell.execute_reply":"2024-07-26T11:28:46.960703Z"},"trusted":true},"execution_count":77,"outputs":[{"execution_count":77,"output_type":"execute_result","data":{"text/plain":"['▁I', \"'\", 'm', '▁a', '▁short', '▁sentence']"},"metadata":{}}]},{"cell_type":"code","source":"def tokenization(example):\n    #Tokenize\n    tokens = tokenizer.tokenize(example[\"text\"])\n    \n    # Convert tokens to ids\n    token_ids = tokenizer.convert_tokens_to_ids(tokens)\n    \n    # Add <bos>, <eos> tokens to the front and back of tokens_ids \n    # bos: begin of sequence, eos: end of sequence\n    token_ids = [\n        tokenizer.bos_token_id] \\\n        + token_ids \\\n        + [tokenizer.eos_token_id\n    ]\n    example[\"input_ids\"] = token_ids\n    \n    # We will be using this column to count the total number of tokens \n    # in the final dataset\n    example[\"num_tokens\"] = len(token_ids)\n    return example","metadata":{"execution":{"iopub.status.busy":"2024-07-26T11:34:54.375477Z","iopub.execute_input":"2024-07-26T11:34:54.376558Z","iopub.status.idle":"2024-07-26T11:34:54.382856Z","shell.execute_reply.started":"2024-07-26T11:34:54.376490Z","shell.execute_reply":"2024-07-26T11:34:54.381582Z"},"trusted":true},"execution_count":78,"outputs":[]},{"cell_type":"markdown","source":"Tokenize Etme:\nİlk adımda, \"Merhaba dünya\" metni token'lere ayrılır. Bu işlem sonucu iki token elde ederiz: [\"Merhaba\", \"dünya\"].\n\nToken'leri ID'lere Çevirme:\nElde edilen token'ler, modelin kelime dağarcığındaki karşılıklarıyla sayısal ID'lere dönüştürülür. Örneğin, \"Merhaba\" token'ı 1234 ve \"dünya\" token'ı 5678 ID'leriyle temsil edilebilir. Böylece token'ler şu hale gelir: [1234, 5678].\n\nÖzel Token'leri Ekleyin:\nBaşlangıç (<bos>) ve bitiş (<eos>) token'lerini eklemek için, ID listesinin başına ve sonuna sırasıyla 101 ve 102 ID'lerini ekleriz. Bu token'ler sırasıyla bos_token_id ve eos_token_id değerlerine karşılık gelir. Sonuç olarak, token ID'leri [101, 1234, 5678, 102] şeklinde olur.\n\nToken Sayısını Hesaplayın:\nSon olarak, toplam token sayısını hesaplarız. Token ID'leri listesi [101, 1234, 5678, 102] olduğundan, bu liste dört token içerir. Bu bilgi example sözlüğüne \"num_tokens\" anahtarı altında eklenir ve değeri 4 olur.\n    \nSonuç olarak, example sözlüğü şu hale gelir:    \n    {\n    \"text\": \"Merhaba dünya\",\n    \"input_ids\": [101, 1234, 5678, 102],\n    \"num_tokens\": 4\n}\n","metadata":{"jupyter":{"source_hidden":true}}},{"cell_type":"markdown","source":"Tokenize all the examples in the pretraining dataset:","metadata":{}},{"cell_type":"markdown","source":"Bu kod, Hugging Face datasets kütüphanesi kullanılarak bir veri kümesine tokenizasyon işlemi uygular ve bu işlem sonrası veri kümesini ekrana yazdırır. dataset.map metodu, her bir veri örneği üzerinde tokenization fonksiyonunu uygularken, load_from_cache_file=False parametresi, verilerin her seferinde taze olarak işlenmesini sağlar. print(dataset) ise veri kümesinin son durumunu görüntülemek için kullanılır.\n\nVarsayalım ki dataset'in bazı verileri şu şekildedir:\n\n[{'text': 'Merhaba dünya'}, {'text': 'Nasılsın?'}]\n\ntokenization fonksiyonu uygulandıktan sonra, veri kümesi şu şekilde güncellenmiş olabilir:\n\n[{'text': 'Merhaba dünya', 'input_ids': [101, 1234, 5678, 102], 'num_tokens': 4},\n {'text': 'Nasılsın?', 'input_ids': [101, 6789, 1020, 102], 'num_tokens': 3}]\n","metadata":{}},{"cell_type":"code","source":"dataset = dataset.map(tokenization, load_from_cache_file=False)\nprint(dataset)","metadata":{"execution":{"iopub.status.busy":"2024-07-26T11:34:56.815553Z","iopub.execute_input":"2024-07-26T11:34:56.815992Z","iopub.status.idle":"2024-07-26T11:35:39.164447Z","shell.execute_reply.started":"2024-07-26T11:34:56.815960Z","shell.execute_reply":"2024-07-26T11:35:39.163343Z"},"trusted":true},"execution_count":79,"outputs":[{"output_type":"display_data","data":{"text/plain":"Map:   0%|          | 0/4048 [00:00<?, ? examples/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"b195eedd5f354ad69704c44455df2ffb"}},"metadata":{}},{"name":"stdout","text":"Dataset({\n    features: ['text', 'input_ids', 'num_tokens'],\n    num_rows: 4048\n})\n","output_type":"stream"}]},{"cell_type":"code","source":"sample = dataset[3]\n\nprint(\"text\", sample[\"text\"][:30]) # \nprint(\"\\ninput_ids\", sample[\"input_ids\"][:30])\nprint(\"\\nnum_tokens\", sample[\"num_tokens\"])","metadata":{"execution":{"iopub.status.busy":"2024-07-26T11:35:39.166138Z","iopub.execute_input":"2024-07-26T11:35:39.166476Z","iopub.status.idle":"2024-07-26T11:35:39.173680Z","shell.execute_reply.started":"2024-07-26T11:35:39.166445Z","shell.execute_reply":"2024-07-26T11:35:39.172401Z"},"trusted":true},"execution_count":80,"outputs":[{"name":"stdout","text":"text The Colorado Climate Center pr\n\ninput_ids [1, 415, 15837, 1366, 3314, 6064, 5312, 430, 19102, 304, 1178, 356, 281, 3928, 28725, 9735, 28713, 28725, 264, 1052, 14455, 4623, 28725, 9390, 1452, 274, 28725, 17268, 28713, 28725]\n\nnum_tokens 549\n","output_type":"stream"}]},{"cell_type":"markdown","source":"Check the total number of tokens in the dataset:","metadata":{}},{"cell_type":"code","source":"import numpy as np\nnp.sum(dataset[\"num_tokens\"])","metadata":{"execution":{"iopub.status.busy":"2024-07-26T11:35:45.175790Z","iopub.execute_input":"2024-07-26T11:35:45.176199Z","iopub.status.idle":"2024-07-26T11:35:45.191215Z","shell.execute_reply.started":"2024-07-26T11:35:45.176168Z","shell.execute_reply":"2024-07-26T11:35:45.189766Z"},"trusted":true},"execution_count":81,"outputs":[{"execution_count":81,"output_type":"execute_result","data":{"text/plain":"5113663"},"metadata":{}}]},{"cell_type":"markdown","source":"Concatenate input_ids for all examples into a single list:","metadata":{}},{"cell_type":"code","source":"input_ids = np.concatenate(dataset[\"input_ids\"])\nprint(len(input_ids))","metadata":{"execution":{"iopub.status.busy":"2024-07-26T11:42:11.031917Z","iopub.execute_input":"2024-07-26T11:42:11.032254Z","iopub.status.idle":"2024-07-26T11:42:13.964226Z","shell.execute_reply.started":"2024-07-26T11:42:11.032227Z","shell.execute_reply":"2024-07-26T11:42:13.963062Z"},"trusted":true},"execution_count":83,"outputs":[{"name":"stdout","text":"5113663\n","output_type":"stream"}]},{"cell_type":"code","source":"max_seq_length=32","metadata":{"execution":{"iopub.status.busy":"2024-07-26T11:42:31.854497Z","iopub.execute_input":"2024-07-26T11:42:31.855254Z","iopub.status.idle":"2024-07-26T11:42:31.860328Z","shell.execute_reply.started":"2024-07-26T11:42:31.855222Z","shell.execute_reply":"2024-07-26T11:42:31.859011Z"},"trusted":true},"execution_count":84,"outputs":[]},{"cell_type":"code","source":"total_length = len(input_ids) - len(input_ids) % max_seq_length\nprint(total_length)","metadata":{"execution":{"iopub.status.busy":"2024-07-26T11:43:10.996052Z","iopub.execute_input":"2024-07-26T11:43:10.996480Z","iopub.status.idle":"2024-07-26T11:43:11.002169Z","shell.execute_reply.started":"2024-07-26T11:43:10.996438Z","shell.execute_reply":"2024-07-26T11:43:11.000969Z"},"trusted":true},"execution_count":85,"outputs":[{"name":"stdout","text":"5113632\n","output_type":"stream"}]},{"cell_type":"markdown","source":"Discard extra tokens from end of the list so number of tokens is exactly divisible by `max_seq_length`:","metadata":{}},{"cell_type":"code","source":"input_ids = input_ids[:total_length]\nprint(input_ids.shape)","metadata":{"execution":{"iopub.status.busy":"2024-07-26T11:46:09.498843Z","iopub.execute_input":"2024-07-26T11:46:09.499268Z","iopub.status.idle":"2024-07-26T11:46:09.505598Z","shell.execute_reply.started":"2024-07-26T11:46:09.499238Z","shell.execute_reply":"2024-07-26T11:46:09.504266Z"},"trusted":true},"execution_count":86,"outputs":[{"name":"stdout","text":"(5113632,)\n","output_type":"stream"}]},{"cell_type":"code","source":"input_ids_reshaped = input_ids.reshape(-1, max_seq_length).astype(np.int32)\ninput_ids_reshaped.shape","metadata":{"execution":{"iopub.status.busy":"2024-07-26T11:47:04.376159Z","iopub.execute_input":"2024-07-26T11:47:04.376661Z","iopub.status.idle":"2024-07-26T11:47:04.391614Z","shell.execute_reply.started":"2024-07-26T11:47:04.376622Z","shell.execute_reply":"2024-07-26T11:47:04.390474Z"},"trusted":true},"execution_count":87,"outputs":[{"execution_count":87,"output_type":"execute_result","data":{"text/plain":"(159801, 32)"},"metadata":{}}]},{"cell_type":"code","source":"type(input_ids_reshaped)","metadata":{"execution":{"iopub.status.busy":"2024-07-26T11:47:18.857889Z","iopub.execute_input":"2024-07-26T11:47:18.858842Z","iopub.status.idle":"2024-07-26T11:47:18.865399Z","shell.execute_reply.started":"2024-07-26T11:47:18.858805Z","shell.execute_reply":"2024-07-26T11:47:18.864300Z"},"trusted":true},"execution_count":88,"outputs":[{"execution_count":88,"output_type":"execute_result","data":{"text/plain":"numpy.ndarray"},"metadata":{}}]},{"cell_type":"markdown","source":"Convert to Hugging Face dataset:","metadata":{}},{"cell_type":"code","source":"input_ids_list = input_ids_reshaped.tolist()\npackaged_pretrain_dataset = datasets.Dataset.from_dict(\n    {\"input_ids\": input_ids_list}\n)\nprint(packaged_pretrain_dataset)","metadata":{"execution":{"iopub.status.busy":"2024-07-26T11:47:29.474097Z","iopub.execute_input":"2024-07-26T11:47:29.474526Z","iopub.status.idle":"2024-07-26T11:47:31.353787Z","shell.execute_reply.started":"2024-07-26T11:47:29.474480Z","shell.execute_reply":"2024-07-26T11:47:31.352501Z"},"trusted":true},"execution_count":89,"outputs":[{"name":"stdout","text":"Dataset({\n    features: ['input_ids'],\n    num_rows: 159801\n})\n","output_type":"stream"}]},{"cell_type":"markdown","source":"## 3. Save the packed dataset to disk","metadata":{}},{"cell_type":"code","source":"packaged_pretrain_dataset.to_parquet(\"/kaggle/working/packaged_pretrain_dataset.parquet\")","metadata":{"execution":{"iopub.status.busy":"2024-07-26T11:48:25.760038Z","iopub.execute_input":"2024-07-26T11:48:25.760425Z","iopub.status.idle":"2024-07-26T11:48:26.070439Z","shell.execute_reply.started":"2024-07-26T11:48:25.760395Z","shell.execute_reply":"2024-07-26T11:48:26.069313Z"},"trusted":true},"execution_count":91,"outputs":[{"output_type":"display_data","data":{"text/plain":"Creating parquet from Arrow format:   0%|          | 0/160 [00:00<?, ?ba/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"110058d36e7c446bb906d019446a3e67"}},"metadata":{}},{"execution_count":91,"output_type":"execute_result","data":{"text/plain":"21093732"},"metadata":{}}]}]}